class Node: 
    def __init__(self, val): 
        self.val = val 
        self.left = None
        self.right = None
  
def search(root, key): 
  
    # Base Cases: root is null or key is present at root 
    if root is None or root.val == key: 
        return root 
  
    # Key is greater than root's key 
    if root.val < key: 
        return search(root.right, key) 
  
    # Key is smaller than root's key 
    return search(root.left, key) 
  
# Driver program to test the above function 
# Let us create the following BST 
#      50 
#    /    \ 
#   30     70 
#   / \    / \ 
#  20 40  60 80 
root = Node(50) 
root.left      = Node(30) 
root.right     = Node(70) 
root.left.left  = Node(20) 
root.left.right  = Node(40) 
root.right.left  = Node(60) 
root.right.right  = Node(80) 
  
result = search(root, 8) 
  
if result is not None: 
    print ("Node with value 8 is found") 
else : 
    print ("Node with value 8 is not found")